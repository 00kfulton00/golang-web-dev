# Core concepts

To understand web dev with Go, you must understand these core concepts:

## [Interface](https://golang.org/doc/effective_go.html#interfaces)

Interfaces in Go provide a way to specify the behavior of an object: if something can do this, then it can be used here. 

Interfaces with only one or two methods are common in Go code, and are usually given a name derived from the method, such as [io.Writer](https://godoc.org/io#Writer) for something that implements Write.

``` go
type Writer interface {
    Write(p []byte) (n int, err error)
}
```

A type can implement multiple interfaces. For instance, a collection can be sorted by the routines in package sort if it implements [sort.Interface](https://godoc.org/sort#Interface), which contains Len(), Less(i, j int) bool, and Swap(i, j int), and it could also have a custom formatter. In this contrived example Sequence satisfies both.

``` go
type Interface interface {
    // Len is the number of elements in the collection.
    Len() int
    // Less reports whether the element with
    // index i should sort before the element with index j.
    Less(i, j int) bool
    // Swap swaps the elements with indexes i and j.
    Swap(i, j int)
}
```

Interfaces define behavior.

In old-school OOP programming, objects know & do; data & methods; knowledge & behavior. In Go, types have methods.

An interface creates a new type: the type that implements the interface is then *two* types - its interface type and its underlying type.

In Go, interfaces are implicitly implemented (not explicitly): if a type has the method defined by the interface, then that type implements the interface.


## Request response pattern

## http.Handler
``` go
type Handler interface {
    ServeHTTP(ResponseWriter, *Request)
}
``` 

A *handler* will handle a request by providing a response.

***